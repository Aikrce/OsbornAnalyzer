import { useState, useEffect, useCallback } from 'react';

// AIÈÖçÁΩÆÊé•Âè£
export interface AIConfig {
  apiKey: string;
  model: 'deepseek-coder' | 'deepseek-chat';
  temperature: number;
  maxTokens: number;
}

// Â§öAPIÈÖçÁΩÆÊé•Âè£
export interface APIConfig {
  id: string;
  name: string;
  provider: 'deepseek' | 'openai' | 'claude' | 'custom';
  apiKey: string;
  model: string;
  temperature: number;
  maxTokens: number;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

const STORAGE_KEY = 'huitu-ai-config';
const MULTI_API_STORAGE_KEY = 'huitu-multi-api-configs';

const defaultConfig: AIConfig = {
  apiKey: '',
  model: 'deepseek-chat',
  temperature: 0.7,
  maxTokens: 2000,
};

export const useAIConfig = () => {
  const [config, setConfig] = useState<AIConfig>(defaultConfig);
  const [apiConfigs, setApiConfigs] = useState<APIConfig[]>([]);

  // ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩÈÖçÁΩÆ
  const loadConfig = useCallback(() => {
    try {
      console.log('üîç Ê≠£Âú®Âä†ËΩΩAIÈÖçÁΩÆ...');
      const stored = localStorage.getItem(STORAGE_KEY);
      console.log('üì¶ ‰ªélocalStorageËØªÂèñ:', STORAGE_KEY, '=', stored ? 'ÊúâÊï∞ÊçÆ' : 'Êó†Êï∞ÊçÆ');
      
      if (stored) {
        const parsedConfig = JSON.parse(stored);
        console.log('üìã Ëß£ÊûêÁöÑÈÖçÁΩÆ:', parsedConfig);
        const mergedConfig = { ...defaultConfig, ...parsedConfig };
        console.log('üîÑ ÂêàÂπ∂ÂêéÁöÑÈÖçÁΩÆ:', mergedConfig);
        setConfig(mergedConfig);
        console.log('‚úÖ AIÈÖçÁΩÆÂä†ËΩΩÂÆåÊàê');
      } else {
        console.log('‚ö†Ô∏è Êú™ÊâæÂà∞‰øùÂ≠òÁöÑAIÈÖçÁΩÆÔºå‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ');
      }
    } catch (error) {
      console.error('‚ùå Failed to load AI config:', error);
    }
  }, []);

  // ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩÂ§öAPIÈÖçÁΩÆ
  const loadApiConfigs = useCallback(() => {
    try {
      const stored = localStorage.getItem(MULTI_API_STORAGE_KEY);
      if (stored) {
        const parsedConfigs = JSON.parse(stored);
        setApiConfigs(parsedConfigs.map((config: any) => ({
          ...config,
          createdAt: new Date(config.createdAt),
          updatedAt: new Date(config.updatedAt)
        })));
      }
    } catch (error) {
      console.error('Failed to load API configs:', error);
    }
  }, []);

  // ‰øùÂ≠òÈÖçÁΩÆÂà∞Êú¨Âú∞Â≠òÂÇ®
  const saveConfig = useCallback((newConfig: Partial<AIConfig>) => {
    try {
      console.log('üíæ Ê≠£Âú®‰øùÂ≠òAIÈÖçÁΩÆ...');
      console.log('üìù ÂΩìÂâçÈÖçÁΩÆ:', config);
      console.log('üîÑ Êñ∞ÈÖçÁΩÆ:', newConfig);
      
      const updatedConfig = { ...config, ...newConfig };
      console.log('üîÑ ÂêàÂπ∂ÂêéÁöÑÈÖçÁΩÆ:', updatedConfig);
      
      const configString = JSON.stringify(updatedConfig);
      console.log('üì¶ ‰øùÂ≠òÂà∞localStorage:', STORAGE_KEY, '=', configString);
      
      localStorage.setItem(STORAGE_KEY, configString);
      setConfig(updatedConfig);
      
      console.log('‚úÖ AIÈÖçÁΩÆ‰øùÂ≠òÂÆåÊàê');
    } catch (error) {
      console.error('‚ùå Failed to save AI config:', error);
    }
  }, [config]);

  // ‰øùÂ≠òÂ§öAPIÈÖçÁΩÆÂà∞Êú¨Âú∞Â≠òÂÇ®
  const saveApiConfigs = useCallback((newConfigs: APIConfig[]) => {
    try {
      localStorage.setItem(MULTI_API_STORAGE_KEY, JSON.stringify(newConfigs));
      setApiConfigs(newConfigs);
    } catch (error) {
      console.error('Failed to save API configs:', error);
    }
  }, []);

  // Êõ¥Êñ∞ÈÖçÁΩÆ
  const updateConfig = useCallback((newConfig: Partial<AIConfig>) => {
    saveConfig(newConfig);
    
    // ÂêåÊó∂Êõ¥Êñ∞AIÊúçÂä°ÈÖçÁΩÆ
    if (newConfig.apiKey) {
      const updatedConfig = { ...config, ...newConfig };
      import('../services/ai/aiService').then(({ default: aiService }) => {
        aiService.configure(updatedConfig);
        console.log('AIÊúçÂä°ÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞');
      });
    }
  }, [saveConfig, config]);

  // ÈáçÁΩÆÈÖçÁΩÆ
  const resetConfig = useCallback(() => {
    setConfig(defaultConfig);
    localStorage.removeItem(STORAGE_KEY);
  }, []);

  // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÈÖçÁΩÆAPIÂØÜÈí• - ÂêåÊó∂Ê£ÄÊü•Âü∫Á°ÄÈÖçÁΩÆÂíåÂ§öAPIÈÖçÁΩÆ
  const isConfigured = useCallback(() => {
    // Ê£ÄÊü•Âü∫Á°ÄÈÖçÁΩÆ
    if (config.apiKey.trim().length > 0) {
      return true;
    }
    
    // Ê£ÄÊü•Â§öAPIÈÖçÁΩÆ‰∏≠ÁöÑÊ¥ªË∑ÉÈÖçÁΩÆ
    const activeApiConfig = apiConfigs.find(c => c.isActive);
    if (activeApiConfig && activeApiConfig.apiKey.trim().length > 0) {
      return true;
    }
    
    return false;
  }, [config.apiKey, apiConfigs]);

  // Ê∑ªÂä†Êñ∞ÁöÑAPIÈÖçÁΩÆ
  const addApiConfig = useCallback((newConfig: Omit<APIConfig, 'id' | 'createdAt' | 'updatedAt'>) => {
    const configWithId: APIConfig = {
      ...newConfig,
      id: `api-config-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const updatedConfigs = [...apiConfigs, configWithId];
    saveApiConfigs(updatedConfigs);
    return configWithId;
  }, [apiConfigs, saveApiConfigs]);

  // Êõ¥Êñ∞APIÈÖçÁΩÆ
  const updateApiConfig = useCallback((id: string, updates: Partial<APIConfig>) => {
    const updatedConfigs = apiConfigs.map(config => 
      config.id === id 
        ? { ...config, ...updates, updatedAt: new Date() }
        : config
    );
    saveApiConfigs(updatedConfigs);
  }, [apiConfigs, saveApiConfigs]);

  // Âà†Èô§APIÈÖçÁΩÆ
  const deleteApiConfig = useCallback((id: string) => {
    const updatedConfigs = apiConfigs.filter(config => config.id !== id);
    saveApiConfigs(updatedConfigs);
  }, [apiConfigs, saveApiConfigs]);

  // ËÆæÁΩÆÊ¥ªË∑ÉÁöÑAPIÈÖçÁΩÆ
  const setActiveApiConfig = useCallback((id: string) => {
    const updatedConfigs = apiConfigs.map(config => ({
      ...config,
      isActive: config.id === id
    }));
    saveApiConfigs(updatedConfigs);
    
    // ÂêåÊó∂Êõ¥Êñ∞AIÊúçÂä°ÈÖçÁΩÆ
    const activeConfig = updatedConfigs.find(config => config.isActive);
    if (activeConfig && activeConfig.apiKey) {
      import('../services/ai/aiService').then(({ default: aiService }) => {
        aiService.configure({
          apiKey: activeConfig.apiKey,
          model: activeConfig.model as 'deepseek-chat' | 'deepseek-coder',
          temperature: activeConfig.temperature,
          maxTokens: activeConfig.maxTokens
        });
        console.log('AIÊúçÂä°Â∑≤ÂàáÊç¢Âà∞Ê¥ªË∑ÉÈÖçÁΩÆ:', activeConfig.name);
      });
    }
  }, [apiConfigs, saveApiConfigs]);

  // Ëé∑ÂèñÂΩìÂâçÊ¥ªË∑ÉÁöÑAPIÈÖçÁΩÆ
  const getActiveApiConfig = useCallback(() => {
    return apiConfigs.find(config => config.isActive) || apiConfigs[0];
  }, [apiConfigs]);

  // Ëé∑ÂèñÂΩìÂâçÊúâÊïàÁöÑÈÖçÁΩÆÔºàÂü∫Á°ÄÈÖçÁΩÆÊàñÂ§öAPIÈÖçÁΩÆÔºâ
  const getEffectiveConfig = useCallback(() => {
    const activeApiConfig = apiConfigs.find(c => c.isActive);
    if (activeApiConfig && activeApiConfig.apiKey.trim().length > 0) {
      return {
        apiKey: activeApiConfig.apiKey,
        model: activeApiConfig.model as 'deepseek-chat' | 'deepseek-coder',
        temperature: activeApiConfig.temperature,
        maxTokens: activeApiConfig.maxTokens,
        source: 'multi-api' as const
      };
    }
    
    if (config.apiKey.trim().length > 0) {
      return {
        ...config,
        source: 'basic' as const
      };
    }
    
    return null;
  }, [config, apiConfigs]);

  // ÂàùÂßãÂåñÂä†ËΩΩ
  useEffect(() => {
    loadConfig();
    loadApiConfigs();
  }, [loadConfig, loadApiConfigs]);

  return {
    config,
    updateConfig,
    resetConfig,
    isConfigured: isConfigured(),
    getEffectiveConfig,
    // Â§öAPIÈÖçÁΩÆÁõ∏ÂÖ≥
    apiConfigs,
    addApiConfig,
    updateApiConfig,
    deleteApiConfig,
    setActiveApiConfig,
    getActiveApiConfig,
  };
};
